// Place your JS workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
// Placeholders with the same ids are connected.
// Example:
// "Print to console": {
// 	"scope": "javascript,typescript",
// 	"prefix": "log",
// 	"body": [
// 		"console.log('$1');",
// 		"$2"
// 	],
// 	"description": "Log output to console"
// }
{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "document.querySelector('')": {
    "scope": "",
    "prefix": "qs",
    "body": ["document.querySelector('$1');", "$2"],
    "description": "document.querySelector('')"
  },

  "object": {
    "scope": "",
    "prefix": "ob",
    "body": ["const $1 = {$2};"],
    "description": "object"
  },

  "const": {
    "scope": "",
    "prefix": "c",
    "body": ["const $1 = $2;"],
    "description": "const"
  },

  "addEventListener": {
    "scope": "",
    "prefix": "avl",
    "body": ["$1.addEventListener('$2', ($3) => {$4});"],
    "description": "addEventListener"
  },

  "console.log": {
    "scope": "",
    "prefix": "l",
    "body": ["console.log($1);$2"],
    "description": "console.log"
  },

  "arrow function": {
    "scope": "",
    "prefix": "af",
    "body": ["($1) => {$2}"],
    "description": "console.log"
  },

  "promise": {
    "scope": "",
    "prefix": "pr",
    "body": ["return new Promise((resolv, reject) => {$1});"],
    "description": "console.log"
  },

  "use strict": {
    "scope": "",
    "prefix": "u",
    "body": ["'use strict';$1"],
    "description": "use strict"
  },
  "constReact": {
    "scope": "",
    "prefix": "cr",
    "body": ["const $1 = ($2) => {return ($3)}"],
    "description": "constReact"
  }
}
